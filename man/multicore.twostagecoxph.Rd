% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/twostagecoxph.R
\name{multicore.twostagecoxph}
\alias{multicore.twostagecoxph}
\title{Multicore method of performing the second stage}
\usage{
multicore.twostagecoxph(
  survival.dataset,
  covariate.matrix,
  first.stage.threshold,
  progress = 50,
  max.coef = 5,
  updatefile = "",
  max.batchsize = 1000,
  upper.bound.correlation
)
}
\arguments{
\item{survival.dataset}{the outcome data}

\item{covariate.matrix}{The SNPs}

\item{first.stage.threshold}{the FST}

\item{progress}{set to 0 for no updates}

\item{max.coef}{maximum value of fitted weights before declared non-converged}

\item{updatefile}{path to that file}

\item{max.batchsize}{max number of covariates in one batch}

\item{upper.bound.correlation}{upper bound on the correlation before not checked}
}
\value{
list of p-value matrix, first stage p-values and which ones passed.
}
\description{
Multicore method of performing the second stage
}
\details{
Similarly to the multicore method of the first stage, this function works with
batches of covariates to alleviate possible memory issues. The optimal size of the batches
is calculated in a similar fashion as during the first stage, only here we halve the maximum
batchsize, since (almost always) two batches of covariates will be in memory at the same time.

The testing for interactions is done in a first-in, last-out approach. The first batch of
covariates will be tested for interactions with itself, then for with all covariates from
subsequent batches. The second batch does not need to test for interactions with the first one,
since the first one already did that. This allows the second batch to be done before the first one,
hence the "first-in, last-out" naming. The number of batches will always be a multiple of
two times the number of worker cores; this should ensure that all workers should be done
at the same time.
}
